{
	"info": {
		"_postman_id": "e2f81f35-a1bb-4af8-a9c3-a6bfb8bbaf3e",
		"name": "PDF Pack API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25057296",
		"_collection_link": "https://interstellar-shuttle-124479.postman.co/workspace/My-Workspace~d2338f60-1776-4520-890d-4891e305e3fe/collection/25057296-e2f81f35-a1bb-4af8-a9c3-a6bfb8bbaf3e?action=share&source=collection_link&creator=25057296"
	},
	"item": [
		{
			"name": "Happy Path",
			"item": [
				{
					"name": "add_img_watermark",
					"item": [
						{
							"name": "get_token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"Auth_token\", data.token);",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.token).to.exist;",
											"});",
											"",
											"pm.test(\"Token is a non-empty string\", function () {",
											"    pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
											"});",
											"",
											"pm.test(\"Content-Type header is set to application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Token</th>",
											"        <th>Expiration</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.token}}</td>",
											"        <td>{{response.expiration}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/get_token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"get_token"
									]
								},
								"description": "\n### Get Token\n\nThis endpoint is used to retrieve a token.\n\n#### Request\n\n- No request body is required for this request.\n\n#### Response\n\nThe response will be a JSON object with the following schema:\n\n```json\n{\n  \"token\": \"string\"\n}\n```\nThe `token` field contains the retrieved token.\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.uid).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"UID is a non-empty string\", function () {",
											"  pm.expect(responseData.uid).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "225",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "check_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"  pm.expect(responseData.deleteTime).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"    pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Delete time is an object with hours, minutes, and seconds fields\", function () {",
											"  pm.expect(responseData.deleteTime).to.be.an('object');",
											"  pm.expect(responseData.deleteTime.hours).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.deleteTime.minutes).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.deleteTime.seconds).to.exist.and.to.be.a('number');",
											"});",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>Delete Time</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.deleteTime.hours}}h {{response.deleteTime.minutes}}m {{response.deleteTime.seconds}}s</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "",
											"value": "c7181d48-50b0-4c08-8f11-0aff32f8b30f",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/check_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"check_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								},
								"description": "\n# Check File Endpoint\n\nThis endpoint is used to check the status of a file using the provided UID.\n\n## Request\n\n### Request Body\n- Type: x-www-form-urlencoded\n\n| Key | Type | Description |\n|-----|------|-------------|\n|       | text |             |\n\n### Parameters\n- UID: (query parameter) - The unique identifier of the file to be checked.\n\n## Response\n\nThe response for this request is a JSON object conforming to the following schema:\n\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"string\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n```\nThe `status` property indicates the status of the file, and the `message` property provides additional information about the status.\n"
							},
							"response": []
						},
						{
							"name": "expire_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('hours');",
											"  pm.expect(responseData).to.have.property('minutes');",
											"  pm.expect(responseData).to.have.property('seconds');",
											"});",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Verify content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Hours</th>",
											"        <th>Minutes</th>",
											"        <th>Seconds</th>",
											"    </tr>",
											"    ",
											"    <tr>",
											"        <td>{{response.hours}}</td>",
											"        <td>{{response.minutes}}</td>",
											"        <td>{{response.seconds}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/expire_time?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"expire_time"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								},
								"description": "\n### Get Expire Time\nThis endpoint retrieves the expiration time for a specific user ID.\n\n#### Request\n- Method: GET\n- URL: `{{baseUrl}}/expire_time`\n- Query Parameters:\n  - UID (string, required): The unique user ID for which the expiration time is to be retrieved.\n\n#### Response\nThe response for this request is a JSON object with the following schema:\n```json\n{\n  \"expirationTime\": \"string\"\n}\n- expirationTime (string): The expiration time for the specified user ID.\n"
							},
							"response": []
						},
						{
							"name": "download_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/download?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"download"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to download a resource identified by the UID parameter in the query string.\n\n### Response\nThe response of this request is a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "delete_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {  ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>ID</th>",
											"        <th>File Name</th>",
											"        <th>Status</th>",
											"    </tr>",
											"    ",
											"    {{#each response}}",
											"        <tr>",
											"            <td>{{id}}</td>",
											"            <td>{{fileName}}</td>",
											"            <td>{{status}}</td>",
											"        </tr>",
											"    {{/each}}",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/delete_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delete_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								},
								"description": "\nThis endpoint sends an HTTP GET request to the specified URL in order to delete a file with a unique identifier (UID) provided as a query parameter.\n\n### Response\nThe response of this request is in JSON format and can be documented as a JSON schema.\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "add_text_watermark",
					"item": [
						{
							"name": "add_text_watermark",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.uid).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"UID is a non-empty string\", function () {",
											"  pm.expect(responseData.uid).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "check_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"  pm.expect(responseData.deleteTime).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"    pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"",
											"pm.test(\"Message field is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Delete time is an object with hours, minutes, and seconds fields\", function () {",
											"  pm.expect(responseData.deleteTime).to.be.an('object');",
											"  pm.expect(responseData.deleteTime.hours).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.deleteTime.minutes).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.deleteTime.seconds).to.exist.and.to.be.a('number');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "",
											"value": "c7181d48-50b0-4c08-8f11-0aff32f8b30f",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/check_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"check_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "expire_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('hours');",
											"  pm.expect(responseData).to.have.property('minutes');",
											"  pm.expect(responseData).to.have.property('seconds');",
											"});",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Verify content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/expire_time?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"expire_time"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "download_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('hours');",
											"  pm.expect(responseData).to.have.property('minutes');",
											"  pm.expect(responseData).to.have.property('seconds');",
											"});",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Verify content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/download?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"download"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/delete_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delete_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "compress_pdf",
					"item": [
						{
							"name": "compress_pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('success');",
											"    pm.expect(responseData).to.have.property('message');",
											"    pm.expect(responseData).to.have.property('uid');",
											"});",
											"",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"",
											"pm.test(\"Message field is a string or empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.satisfy((message) => {",
											"        return typeof message === 'string' || message === '';",
											"    }, \"Message field should be a string or empty\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "KaDnZQ2GV/Lecture 8 - Applying ethnography in design.pdf"
										},
										{
											"key": "compress_level",
											"value": "recommended",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/compress_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compress_pdf"
									]
								},
								"description": "\n### Compress PDF\n\nThis endpoint allows you to compress PDF files.\n\n#### Request Body\n- `files` (file): The PDF file to be compressed.\n- `compress_level` (text): The level of compression to be applied.\n\n#### Response\nThe response of this request is a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "check_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"  pm.expect(responseData.deleteTime).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"    pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Delete time is an object with hours, minutes, and seconds fields\", function () {",
											"  pm.expect(responseData.deleteTime).to.be.an('object');",
											"  pm.expect(responseData.deleteTime.hours).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.deleteTime.minutes).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.deleteTime.seconds).to.exist.and.to.be.a('number');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "",
											"value": "c7181d48-50b0-4c08-8f11-0aff32f8b30f",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/check_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"check_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "expire_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('hours');",
											"  pm.expect(responseData).to.have.property('minutes');",
											"  pm.expect(responseData).to.have.property('seconds');",
											"});",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Verify content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/expire_time?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"expire_time"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "download_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/download?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"download"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {  ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/delete_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delete_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "merge_pdf",
					"item": [
						{
							"name": "merge_pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message, and uid\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.uid).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"pm.test(\"UID field is a non-empty string\", function () {",
											"  pm.expect(responseData.uid).to.be.a('string');",
											"  pm.expect(responseData.uid).to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": [
												"dibV_1ZhF/Lecture 8 - Applying ethnography in design.pdf",
												"dibV_1ZhF/Lecture 9 - Design prototyping and construction.pdf"
											]
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/merge_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"merge_pdf"
									]
								},
								"description": "\nThe `POST /merge_pdf` endpoint is used to merge multiple PDF files into a single PDF document. The request should be made to the base URL.\n\n### Request Body\nThe request should include form-data with a key \"files\" that contains the PDF files to be merged. Each file should be of type \"file\".\n\n### Response\nThe response of this request is a JSON schema describing the structure of the response data.\n"
							},
							"response": []
						},
						{
							"name": "check_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"  pm.expect(responseData.deleteTime).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"pm.test(\"DeleteTime field is an object with hours, minutes, and seconds fields\", function () {",
											"    pm.expect(responseData.deleteTime).to.be.an('object');",
											"    pm.expect(responseData.deleteTime).to.have.property('hours');",
											"    pm.expect(responseData.deleteTime).to.have.property('minutes');",
											"    pm.expect(responseData.deleteTime).to.have.property('seconds');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "",
											"value": "c7181d48-50b0-4c08-8f11-0aff32f8b30f",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/check_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"check_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "download_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify content type is application/pdf\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/pdf\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/download?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"download"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "expire_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - hours, minutes, and seconds\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.hours).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.minutes).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.seconds).to.exist.and.to.be.a('number');",
											"});",
											"",
											"pm.test(\"The hours value should be a non-negative integer\", function () {",
											"    pm.expect(responseData.hours).to.be.a('number');",
											"    pm.expect(responseData.hours).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"The minutes value should be a non-negative integer\", function () {",
											"    pm.expect(responseData.minutes).to.be.a('number');",
											"    pm.expect(responseData.minutes).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"Total time calculated is greater than or equal to zero\", function () {",
											"    const totalSeconds = responseData.hours * 3600 + responseData.minutes * 60 + responseData.seconds;",
											"    pm.expect(totalSeconds).to.be.gte(0);",
											"});",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/expire_time?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"expire_time"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields - success and message\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/delete_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delete_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "OCR",
					"item": [
						{
							"name": "OCR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"/*pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});*/",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message, and uid\", function () { ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.uid).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"pm.test(\"UID field is a non-empty string\", function () {",
											"  pm.expect(responseData.uid).to.be.a('string');",
											"  pm.expect(responseData.uid).to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "s5f_ipGEN/Lecture-3- The Interaction.pdf"
										},
										{
											"key": "language",
											"value": "eng",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/ocr_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ocr_pdf"
									]
								}
							},
							"response": []
						},
						{
							"name": "check_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"  pm.expect(responseData.deleteTime).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"pm.test(\"DeleteTime field is an object with hours, minutes, and seconds fields\", function () {",
											"    pm.expect(responseData.deleteTime).to.be.an('object');",
											"    pm.expect(responseData.deleteTime).to.have.property('hours');",
											"    pm.expect(responseData.deleteTime).to.have.property('minutes');",
											"    pm.expect(responseData.deleteTime).to.have.property('seconds');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "",
											"value": "c7181d48-50b0-4c08-8f11-0aff32f8b30f",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/check_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"check_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "download_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify content type is application/pdf\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/pdf\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/download?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"download"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "expire_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - hours, minutes, and seconds\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.hours).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.minutes).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.seconds).to.exist.and.to.be.a('number');",
											"});",
											"",
											"pm.test(\"The hours value should be a non-negative integer\", function () {",
											"    pm.expect(responseData.hours).to.be.a('number');",
											"    pm.expect(responseData.hours).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"The minutes value should be a non-negative integer\", function () {",
											"    pm.expect(responseData.minutes).to.be.a('number');",
											"    pm.expect(responseData.minutes).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"Total time calculated is greater than or equal to zero\", function () {",
											"    const totalSeconds = responseData.hours * 3600 + responseData.minutes * 60 + responseData.seconds;",
											"    ",
											"    pm.expect(totalSeconds).to.be.gte(0);",
											"});",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/expire_time?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"expire_time"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields - success and message\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/delete_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delete_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "organize_pdf",
					"item": [
						{
							"name": "organize_pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message, and uid\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.uid).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"pm.test(\"UID field is a non-empty string\", function () {",
											"  pm.expect(responseData.uid).to.be.a('string');",
											"  pm.expect(responseData.uid).to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": [
												"-6wvUA3aE/Lecture_6.pdf",
												"-6wvUA3aE/Lecture_5.pdf"
											]
										},
										{
											"key": "ranges",
											"value": "[(0,1),(0,2),(),(0,4),(0,5),(1,1),()]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/organize_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organize_pdf"
									]
								},
								"description": "\n### Organize PDF\n\nThe `organize_pdf` endpoint is used to organize PDF files.\n\n#### Request Body\n- `files` (file): The PDF file to be organized.\n- `ranges` (text): A description of the ranges to be organized.\n\n#### Response\nThe response of this request is a JSON schema. The schema includes the structure and data types of the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "check_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"  pm.expect(responseData.deleteTime).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"pm.test(\"DeleteTime field is an object with hours, minutes, and seconds fields\", function () {",
											"    pm.expect(responseData.deleteTime).to.be.an('object');",
											"    pm.expect(responseData.deleteTime).to.have.property('hours');",
											"    pm.expect(responseData.deleteTime).to.have.property('minutes');",
											"    pm.expect(responseData.deleteTime).to.have.property('seconds');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "",
											"value": "c7181d48-50b0-4c08-8f11-0aff32f8b30f",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/check_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"check_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "download_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify content type is application/pdf\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/pdf\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/download?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"download"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "expire_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - hours, minutes, and seconds\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.hours).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.minutes).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.seconds).to.exist.and.to.be.a('number');",
											"});",
											"",
											"pm.test(\"The hours value should be a non-negative integer\", function () {",
											"    pm.expect(responseData.hours).to.be.a('number');",
											"    pm.expect(responseData.hours).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"The minutes value should be a non-negative integer\", function () {",
											"    pm.expect(responseData.minutes).to.be.a('number');",
											"    pm.expect(responseData.minutes).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"Total time calculated is greater than or equal to zero\", function () {",
											"    const totalSeconds = responseData.hours * 3600 + responseData.minutes * 60 + responseData.seconds;",
											"    ",
											"    pm.expect(totalSeconds).to.be.gte(0);",
											"});",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/expire_time?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"expire_time"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields - success and message\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/delete_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delete_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "pdf_to_excel",
					"item": [
						{
							"name": "pdf_to_xlsx",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.uid).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"UID is a non-empty string\", function () {",
											"  pm.expect(responseData.uid).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "XjgX6ebn_/Lecture-2- The Human.pdf"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_xlsx",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_xlsx"
									]
								},
								"description": "\n### PDF to XLSX Conversion\n\nThis API endpoint makes an HTTP POST request to convert PDF files to XLSX format. The request should be sent to `{{baseUrl}}/pdf_to_xlsx`.\n\n#### Request Body\n- The request should have a form-data body with a key \"files\" of type \"file\".\n\n#### Response\nThe response of this request is documented as a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "check_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"  pm.expect(responseData.deleteTime).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"    pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Delete time is an object with hours, minutes, and seconds fields\", function () {",
											"  pm.expect(responseData.deleteTime).to.be.an('object');",
											"  pm.expect(responseData.deleteTime.hours).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.deleteTime.minutes).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.deleteTime.seconds).to.exist.and.to.be.a('number');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "",
											"value": "c7181d48-50b0-4c08-8f11-0aff32f8b30f",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/check_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"check_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "expire_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('hours');",
											"  pm.expect(responseData).to.have.property('minutes');",
											"  pm.expect(responseData).to.have.property('seconds');",
											"});",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Verify content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/expire_time?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"expire_time"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "download_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('hours');",
											"  pm.expect(responseData).to.have.property('minutes');",
											"  pm.expect(responseData).to.have.property('seconds');",
											"});",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Verify content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/download?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"download"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/delete_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delete_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "xlsx_to_pdf",
					"item": [
						{
							"name": "pdf_to_xlsx",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.uid).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"UID is a non-empty string\", function () {",
											"  pm.expect(responseData.uid).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "XjgX6ebn_/Lecture-2- The Human.pdf"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/excel_to_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"excel_to_pdf"
									]
								},
								"description": "\n### PDF to XLSX Conversion\n\nThis API endpoint makes an HTTP POST request to convert PDF files to XLSX format. The request should be sent to `{{baseUrl}}/pdf_to_xlsx`.\n\n#### Request Body\n- The request should have a form-data body with a key \"files\" of type \"file\".\n\n#### Response\nThe response of this request is documented as a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "check_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"  pm.expect(responseData.deleteTime).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"    pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Delete time is an object with hours, minutes, and seconds fields\", function () {",
											"  pm.expect(responseData.deleteTime).to.be.an('object');",
											"  pm.expect(responseData.deleteTime.hours).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.deleteTime.minutes).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.deleteTime.seconds).to.exist.and.to.be.a('number');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "",
											"value": "c7181d48-50b0-4c08-8f11-0aff32f8b30f",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/check_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"check_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "expire_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('hours');",
											"  pm.expect(responseData).to.have.property('minutes');",
											"  pm.expect(responseData).to.have.property('seconds');",
											"});",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Verify content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/expire_time?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"expire_time"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "download_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('hours');",
											"  pm.expect(responseData).to.have.property('minutes');",
											"  pm.expect(responseData).to.have.property('seconds');",
											"});",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Verify content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/download?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"download"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/delete_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delete_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "pdf_to_img",
					"item": [
						{
							"name": "pdf_to_img",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message, and uid\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.uid).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"pm.test(\"UID field is a non-empty string\", function () {",
											"  pm.expect(responseData.uid).to.be.a('string');",
											"  pm.expect(responseData.uid).to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "PK49TBcxb/Lecture-4- Interaction Design.pdf"
										},
										{
											"key": "img_type",
											"value": "jpg",
											"type": "text"
										},
										{
											"key": "extract_option",
											"value": "f",
											"type": "text"
										},
										{
											"key": "image_quality",
											"value": "100",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_img",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_img"
									]
								},
								"description": "\n### PDF to Image Conversion\n\nThis endpoint allows you to convert PDF files to images.\n\n#### Request Body\n- `files` (file): The PDF file to be converted to an image.\n- `img_type` (text): The type of image format for conversion.\n- `extract_option` (text): The option for extracting images from the PDF.\n- `image_quality` (text): The quality of the output image.\n\n#### Response\nThe response for this request is a JSON schema describing the structure of the response body.\n"
							},
							"response": []
						},
						{
							"name": "check_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"  pm.expect(responseData.deleteTime).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"pm.test(\"DeleteTime field is an object with hours, minutes, and seconds fields\", function () {",
											"    pm.expect(responseData.deleteTime).to.be.an('object');",
											"    pm.expect(responseData.deleteTime).to.have.property('hours');",
											"    pm.expect(responseData.deleteTime).to.have.property('minutes');",
											"    pm.expect(responseData.deleteTime).to.have.property('seconds');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "",
											"value": "c7181d48-50b0-4c08-8f11-0aff32f8b30f",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/check_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"check_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "download_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify content type is application/pdf\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/pdf\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/download?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"download"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "expire_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - hours, minutes, and seconds\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.hours).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.minutes).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.seconds).to.exist.and.to.be.a('number');",
											"});",
											"",
											"pm.test(\"The hours value should be a non-negative integer\", function () {",
											"    pm.expect(responseData.hours).to.be.a('number');",
											"    pm.expect(responseData.hours).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"The minutes value should be a non-negative integer\", function () {",
											"    pm.expect(responseData.minutes).to.be.a('number');",
											"    pm.expect(responseData.minutes).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"Total time calculated is greater than or equal to zero\", function () {",
											"    const totalSeconds = responseData.hours * 3600 + responseData.minutes * 60 + responseData.seconds;",
											"    ",
											"    pm.expect(totalSeconds).to.be.gte(0);",
											"});",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/expire_time?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"expire_time"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields - success and message\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/delete_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delete_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "pdf_to_word",
					"item": [
						{
							"name": "pdf_to_word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message, and uid\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.uid).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"pm.test(\"UID field is a non-empty string\", function () {",
											"  pm.expect(responseData.uid).to.be.a('string');",
											"  pm.expect(responseData.uid).to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "Dra3wKhqL/Mental and Conceptual Models.pdf"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_docx",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_docx"
									]
								},
								"description": "\n### Convert PDF to DOCX\n\nThis endpoint allows you to convert a PDF file to a DOCX file.\n\n#### Request Body\n- `files` (file): The PDF file to be converted.\n\n#### Response\nThe response of this request can be documented as a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "check_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"  pm.expect(responseData.deleteTime).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"pm.test(\"DeleteTime field is an object with hours, minutes, and seconds fields\", function () {",
											"    pm.expect(responseData.deleteTime).to.be.an('object');",
											"    pm.expect(responseData.deleteTime).to.have.property('hours');",
											"    pm.expect(responseData.deleteTime).to.have.property('minutes');",
											"    pm.expect(responseData.deleteTime).to.have.property('seconds');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "",
											"value": "c7181d48-50b0-4c08-8f11-0aff32f8b30f",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/check_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"check_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "download_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify content type is application/pdf\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/pdf\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/download?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"download"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "expire_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - hours, minutes, and seconds\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.hours).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.minutes).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.seconds).to.exist.and.to.be.a('number');",
											"});",
											"",
											"pm.test(\"The hours value should be a non-negative integer\", function () {",
											"    pm.expect(responseData.hours).to.be.a('number');",
											"    pm.expect(responseData.hours).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"The minutes value should be a non-negative integer\", function () {",
											"    pm.expect(responseData.minutes).to.be.a('number');",
											"    pm.expect(responseData.minutes).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"Total time calculated is greater than or equal to zero\", function () {",
											"    const totalSeconds = responseData.hours * 3600 + responseData.minutes * 60 + responseData.seconds;",
											"    ",
											"    pm.expect(totalSeconds).to.be.gte(0);",
											"});",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/expire_time?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"expire_time"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields - success and message\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/delete_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delete_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "rotate_pdf",
					"item": [
						{
							"name": "rotate_pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message, and uid\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.uid).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"pm.test(\"UID field is a non-empty string\", function () {",
											"  pm.expect(responseData.uid).to.be.a('string');",
											"  pm.expect(responseData.uid).to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "TeGa95FB9/Lecture 9 - Design prototyping and construction.pdf"
										},
										{
											"key": "rotatedPages",
											"value": "[(0,1,90), (0,2,-90), (1,3,180), (0,11,90), (0,12,-90), (0,13,100000000)]",
											"type": "text"
										},
										{
											"key": "deletedPages",
											"value": "[(0,1), (1,2), (1,3)]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rotate_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rotate_pdf"
									]
								},
								"description": "\n### Rotate PDF\nThe `rotate_pdf` endpoint is used to rotate specific pages and delete certain pages in a PDF file.\n\n#### Request Body\n- form-data\n  - `files` (file): The PDF file to be rotated.\n  - `rotatedPages` (text): Specify the pages to be rotated.\n  - `deletedPages` (text): Specify the pages to be deleted.\n\n#### Response\nThe response is a JSON object with the following properties:\n- `success` (boolean): Indicates if the operation was successful.\n- `message` (string): Provides additional information about the operation.\n- `uid` (string): Unique identifier for the processed PDF.\n\n#### Example Response\n```json\n{\n    \"success\": true,\n    \"message\": \"\",\n    \"uid\": \"\"\n}\n```\n\n#### JSON Schema\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"uid\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\"success\", \"message\", \"uid\"]\n}\n"
							},
							"response": []
						},
						{
							"name": "check_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"  pm.expect(responseData.deleteTime).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"pm.test(\"DeleteTime field is an object with hours, minutes, and seconds fields\", function () {",
											"    pm.expect(responseData.deleteTime).to.be.an('object');",
											"    pm.expect(responseData.deleteTime).to.have.property('hours');",
											"    pm.expect(responseData.deleteTime).to.have.property('minutes');",
											"    pm.expect(responseData.deleteTime).to.have.property('seconds');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "",
											"value": "c7181d48-50b0-4c08-8f11-0aff32f8b30f",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/check_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"check_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "download_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify content type is application/pdf\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/pdf\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/download?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"download"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "expire_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - hours, minutes, and seconds\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.hours).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.minutes).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.seconds).to.exist.and.to.be.a('number');",
											"});",
											"",
											"pm.test(\"The hours value should be a non-negative integer\", function () {",
											"    pm.expect(responseData.hours).to.be.a('number');",
											"    pm.expect(responseData.hours).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"The minutes value should be a non-negative integer\", function () {",
											"    pm.expect(responseData.minutes).to.be.a('number');",
											"    pm.expect(responseData.minutes).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"Total time calculated is greater than or equal to zero\", function () {",
											"    const totalSeconds = responseData.hours * 3600 + responseData.minutes * 60 + responseData.seconds;",
											"    ",
											"    pm.expect(totalSeconds).to.be.gte(0);",
											"});",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/expire_time?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"expire_time"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields - success and message\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/delete_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delete_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "language",
					"item": [
						{
							"name": "get_language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"Auth_token\", data.token);",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate response matches the defined schema\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    // Add specific property checks here based on the defined schema",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/language?lang=nlp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"language"
									],
									"query": [
										{
											"key": "lang",
											"value": "nlp"
										}
									]
								},
								"description": "\n# Language API\n\nThis API endpoint makes an HTTP GET request to retrieve language information.\n\n### Request\n\nThe request should be sent to `{{baseUrl}}/language` using the form-data request body type. The following parameter should be included:\n\n- `lang` (text): [Description of the parameter]\n\n### Response\n\nThe response of this request is a JSON object conforming to the following schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    // Define the properties of the response object here\n  }\n}\n```\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "split_pdf",
					"item": [
						{
							"name": "split_pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message, and uid\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.uid).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"pm.test(\"UID field is a non-empty string\", function () {",
											"  pm.expect(responseData.uid).to.be.a('string');",
											"  pm.expect(responseData.uid).to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "nzZ-xcJ8r/Lecture 10 - Evaluation of Design.pdf"
										},
										{
											"key": "in_type",
											"value": "'extractPage'",
											"type": "text"
										},
										{
											"key": "fixedRange",
											"value": "",
											"type": "text"
										},
										{
											"key": "mergeOne",
											"value": "",
											"type": "text"
										},
										{
											"key": "extracted",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/split_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"split_pdf"
									]
								},
								"description": "\n# Split PDF\n\nThis endpoint makes an HTTP POST request to split a PDF file.\n\n## Request\nThe request should be sent to `{{baseUrl}}/split_pdf` with a form-data request body. The following parameters are required:\n\n- `file`: The PDF file to be split (type: file)\n- `in_type`: The type of input (type: text)\n- `fixedRange`: The fixed range for splitting (type: text)\n- `mergeOne`: (Optional) Description: (type: text)\n- `extracted`: (Optional) Description: (type: text)\n\n## Response\nThe response for this request is a JSON schema. It includes the schema for the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "check_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"  pm.expect(responseData.deleteTime).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"pm.test(\"DeleteTime field is an object with hours, minutes, and seconds fields\", function () {",
											"    pm.expect(responseData.deleteTime).to.be.an('object');",
											"    pm.expect(responseData.deleteTime).to.have.property('hours');",
											"    pm.expect(responseData.deleteTime).to.have.property('minutes');",
											"    pm.expect(responseData.deleteTime).to.have.property('seconds');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "",
											"value": "c7181d48-50b0-4c08-8f11-0aff32f8b30f",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/check_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"check_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "download_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify content type is application/pdf\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/pdf\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/download?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"download"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "expire_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - hours, minutes, and seconds\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.hours).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.minutes).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.seconds).to.exist.and.to.be.a('number');",
											"});",
											"",
											"pm.test(\"The hours value should be a non-negative integer\", function () {    ",
											"    pm.expect(responseData.hours).to.be.a('number');",
											"    pm.expect(responseData.hours).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"The minutes value should be a non-negative integer\", function () {",
											"    pm.expect(responseData.minutes).to.be.a('number');",
											"    pm.expect(responseData.minutes).to.be.at.least(0);",
											"});",
											"",
											"pm.test(\"Total time calculated is greater than or equal to zero\", function () {",
											"    const totalSeconds = responseData.hours * 3600 + responseData.minutes * 60 + responseData.seconds;",
											"    ",
											"    pm.expect(totalSeconds).to.be.gte(0);",
											"});",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/expire_time?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"expire_time"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields - success and message\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/delete_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delete_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update_tool_table",
					"item": [
						{
							"name": "update_tool_table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/update_tool_table",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"update_tool_table"
									]
								},
								"description": "\n    \n### Update Tool Table\n\nThe `update_tool_table` endpoint is used to update the tool table.\n\n#### Request\n\nThe request should be made using the HTTP POST method with a form-data request body type. The request body should include the necessary parameters to update the tool table.\n\n#### Response\n\nThe response for this request is a JSON schema. It includes the structure and data types of the response body.\n\n"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Missing Authentication",
			"item": [
				{
					"name": "Missing Header",
					"item": [
						{
							"name": "add_image_watermark",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "225",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "compress_pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "KaDnZQ2GV/Lecture 8 - Applying ethnography in design.pdf"
										},
										{
											"key": "compress_level",
											"value": "recommended",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/compress_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compress_pdf"
									]
								},
								"description": "\n### Compress PDF\n\nThis endpoint allows you to compress PDF files.\n\n#### Request Body\n- `files` (file): The PDF file to be compressed.\n- `compress_level` (text): The level of compression to be applied.\n\n#### Response\nThe response of this request is a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "merge_pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": [
												"dibV_1ZhF/Lecture 8 - Applying ethnography in design.pdf",
												"dibV_1ZhF/Lecture 9 - Design prototyping and construction.pdf"
											]
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/merge_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"merge_pdf"
									]
								},
								"description": "\nThe `POST /merge_pdf` endpoint is used to merge multiple PDF files into a single PDF document. The request should be made to the base URL.\n\n### Request Body\nThe request should include form-data with a key \"files\" that contains the PDF files to be merged. Each file should be of type \"file\".\n\n### Response\nThe response of this request is a JSON schema describing the structure of the response data.\n"
							},
							"response": []
						},
						{
							"name": "OCR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "s5f_ipGEN/Lecture-3- The Interaction.pdf"
										},
										{
											"key": "language",
											"value": "eng",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/ocr_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ocr_pdf"
									]
								}
							},
							"response": []
						},
						{
							"name": "organize_pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "2r94rIHw0/Lecture 5 - Conceptualizing Intraction.pdf"
										},
										{
											"key": "ranges",
											"value": "[\"(0,1)\",\"(0,2)\"]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/organize_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organize_pdf"
									]
								},
								"description": "\n### Organize PDF\n\nThe `organize_pdf` endpoint is used to organize PDF files.\n\n#### Request Body\n- `files` (file): The PDF file to be organized.\n- `ranges` (text): A description of the ranges to be organized.\n\n#### Response\nThe response of this request is a JSON schema. The schema includes the structure and data types of the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "pdf_to_xlsx",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "XjgX6ebn_/Lecture-2- The Human.pdf"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_xlsx",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_xlsx"
									]
								},
								"description": "\n### PDF to XLSX Conversion\n\nThis API endpoint makes an HTTP POST request to convert PDF files to XLSX format. The request should be sent to `{{baseUrl}}/pdf_to_xlsx`.\n\n#### Request Body\n- The request should have a form-data body with a key \"files\" of type \"file\".\n\n#### Response\nThe response of this request is documented as a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "pdf_to_img",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "PK49TBcxb/Lecture-4- Interaction Design.pdf"
										},
										{
											"key": "img_type",
											"value": "jpg",
											"type": "text"
										},
										{
											"key": "extract_option",
											"value": "f",
											"type": "text"
										},
										{
											"key": "image_quality",
											"value": "100",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_img",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_img"
									]
								},
								"description": "\n### PDF to Image Conversion\n\nThis endpoint allows you to convert PDF files to images.\n\n#### Request Body\n- `files` (file): The PDF file to be converted to an image.\n- `img_type` (text): The type of image format for conversion.\n- `extract_option` (text): The option for extracting images from the PDF.\n- `image_quality` (text): The quality of the output image.\n\n#### Response\nThe response for this request is a JSON schema describing the structure of the response body.\n"
							},
							"response": []
						},
						{
							"name": "pdf_to_word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "Dra3wKhqL/Mental and Conceptual Models.pdf"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_docx",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_docx"
									]
								},
								"description": "\n### Convert PDF to DOCX\n\nThis endpoint allows you to convert a PDF file to a DOCX file.\n\n#### Request Body\n- `files` (file): The PDF file to be converted.\n\n#### Response\nThe response of this request can be documented as a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "rotate_pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "TeGa95FB9/Lecture 9 - Design prototyping and construction.pdf"
										},
										{
											"key": "rotatedPages",
											"value": "[(0,1,90), (0,2,-90), (1,3,180), (0,11,90), (0,12,-90), (0,13,100000000)]",
											"type": "text"
										},
										{
											"key": "deletedPages",
											"value": "[(0,1), (1,2), (1,3)]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rotate_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rotate_pdf"
									]
								},
								"description": "\n### Rotate PDF\nThe `rotate_pdf` endpoint is used to rotate specific pages and delete certain pages in a PDF file.\n\n#### Request Body\n- form-data\n  - `files` (file): The PDF file to be rotated.\n  - `rotatedPages` (text): Specify the pages to be rotated.\n  - `deletedPages` (text): Specify the pages to be deleted.\n\n#### Response\nThe response is a JSON object with the following properties:\n- `success` (boolean): Indicates if the operation was successful.\n- `message` (string): Provides additional information about the operation.\n- `uid` (string): Unique identifier for the processed PDF.\n\n#### Example Response\n```json\n{\n    \"success\": true,\n    \"message\": \"\",\n    \"uid\": \"\"\n}\n```\n\n#### JSON Schema\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"uid\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\"success\", \"message\", \"uid\"]\n}\n"
							},
							"response": []
						},
						{
							"name": "split_pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "nzZ-xcJ8r/Lecture 10 - Evaluation of Design.pdf"
										},
										{
											"key": "in_type",
											"value": "'extractPage'",
											"type": "text"
										},
										{
											"key": "fixedRange",
											"value": "",
											"type": "text"
										},
										{
											"key": "mergeOne",
											"value": "",
											"type": "text"
										},
										{
											"key": "extracted",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/split_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"split_pdf"
									]
								},
								"description": "\n# Split PDF\n\nThis endpoint makes an HTTP POST request to split a PDF file.\n\n## Request\nThe request should be sent to `{{baseUrl}}/split_pdf` with a form-data request body. The following parameters are required:\n\n- `file`: The PDF file to be split (type: file)\n- `in_type`: The type of input (type: text)\n- `fixedRange`: The fixed range for splitting (type: text)\n- `mergeOne`: (Optional) Description: (type: text)\n- `extracted`: (Optional) Description: (type: text)\n\n## Response\nThe response for this request is a JSON schema. It includes the schema for the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "update_tool_table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/update_tool_table",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"update_tool_table"
									]
								},
								"description": "\n    \n### Update Tool Table\n\nThe `update_tool_table` endpoint is used to update the tool table.\n\n#### Request\n\nThe request should be made using the HTTP POST method with a form-data request body type. The request body should include the necessary parameters to update the tool table.\n\n#### Response\n\nThe response for this request is a JSON schema. It includes the structure and data types of the response body.\n\n"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Error message\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.eql(\"Missing Authorization header.\");\r",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Invalid Token",
					"item": [
						{
							"name": "add_image_watermark",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJqdGkiOiI5ODc4MjNlOS04ZGUxLTQxOTItOTY2Yy0xMjU0NmZkODlkZjYiLCJpYXQiOjE3MTMzOTkzMzgsImV4cCI6MTcxMzQwNjUzOH0.jsQkVFS8mS2ul3-fd3WAegCSViG9-8oRUG449Gcuko",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "/C:/Users/USER/Downloads/Bug Report of My Gp.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "/C:/Users/USER/Downloads/image.webp"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "225",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJqdGkiOiI5ODc4MjNlOS04ZGUxLTQxOTItOTY2Yy0xMjU0NmZkODlkZjYiLCJpYXQiOjE3MTMzOTkzMzgsImV4cCI6MTcxMzQwNjUzOH0.jsQkVFS8mS2ul3-fd3WAegCSViG9-8oRUG449Gcuko",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "compress_pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJqdGkiOiI5ODc4MjNlOS04ZGUxLTQxOTItOTY2Yy0xMjU0NmZkODlkZjYiLCJpYXQiOjE3MTMzOTkzMzgsImV4cCI6MTcxMzQwNjUzOH0.jsQkVFS8mS2ul3-fd3WAegCSViG9-8oRUG449Gcuko",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "KaDnZQ2GV/Lecture 8 - Applying ethnography in design.pdf"
										},
										{
											"key": "compress_level",
											"value": "recommended",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/compress_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compress_pdf"
									]
								},
								"description": "\n### Compress PDF\n\nThis endpoint allows you to compress PDF files.\n\n#### Request Body\n- `files` (file): The PDF file to be compressed.\n- `compress_level` (text): The level of compression to be applied.\n\n#### Response\nThe response of this request is a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "merge_pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJqdGkiOiI5ODc4MjNlOS04ZGUxLTQxOTItOTY2Yy0xMjU0NmZkODlkZjYiLCJpYXQiOjE3MTMzOTkzMzgsImV4cCI6MTcxMzQwNjUzOH0.jsQkVFS8mS2ul3-fd3WAegCSViG9-8oRUG449Gcuko",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": [
												"dibV_1ZhF/Lecture 8 - Applying ethnography in design.pdf",
												"dibV_1ZhF/Lecture 9 - Design prototyping and construction.pdf"
											]
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/merge_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"merge_pdf"
									]
								},
								"description": "\nThe `POST /merge_pdf` endpoint is used to merge multiple PDF files into a single PDF document. The request should be made to the base URL.\n\n### Request Body\nThe request should include form-data with a key \"files\" that contains the PDF files to be merged. Each file should be of type \"file\".\n\n### Response\nThe response of this request is a JSON schema describing the structure of the response data.\n"
							},
							"response": []
						},
						{
							"name": "OCR",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJqdGkiOiI5ODc4MjNlOS04ZGUxLTQxOTItOTY2Yy0xMjU0NmZkODlkZjYiLCJpYXQiOjE3MTMzOTkzMzgsImV4cCI6MTcxMzQwNjUzOH0.jsQkVFS8mS2ul3-fd3WAegCSViG9-8oRUG449Gcuko",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "s5f_ipGEN/Lecture-3- The Interaction.pdf"
										},
										{
											"key": "language",
											"value": "eng",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/ocr_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ocr_pdf"
									]
								}
							},
							"response": []
						},
						{
							"name": "organize_pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJqdGkiOiI5ODc4MjNlOS04ZGUxLTQxOTItOTY2Yy0xMjU0NmZkODlkZjYiLCJpYXQiOjE3MTMzOTkzMzgsImV4cCI6MTcxMzQwNjUzOH0.jsQkVFS8mS2ul3-fd3WAegCSViG9-8oRUG449Gcuko",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "2r94rIHw0/Lecture 5 - Conceptualizing Intraction.pdf"
										},
										{
											"key": "ranges",
											"value": "[\"(0,1)\",\"(0,2)\"]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/organize_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organize_pdf"
									]
								},
								"description": "\n### Organize PDF\n\nThe `organize_pdf` endpoint is used to organize PDF files.\n\n#### Request Body\n- `files` (file): The PDF file to be organized.\n- `ranges` (text): A description of the ranges to be organized.\n\n#### Response\nThe response of this request is a JSON schema. The schema includes the structure and data types of the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "pdf_to_xlsx",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJqdGkiOiI5ODc4MjNlOS04ZGUxLTQxOTItOTY2Yy0xMjU0NmZkODlkZjYiLCJpYXQiOjE3MTMzOTkzMzgsImV4cCI6MTcxMzQwNjUzOH0.jsQkVFS8mS2ul3-fd3WAegCSViG9-8oRUG449Gcuko",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "XjgX6ebn_/Lecture-2- The Human.pdf"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_xlsx",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_xlsx"
									]
								},
								"description": "\n### PDF to XLSX Conversion\n\nThis API endpoint makes an HTTP POST request to convert PDF files to XLSX format. The request should be sent to `{{baseUrl}}/pdf_to_xlsx`.\n\n#### Request Body\n- The request should have a form-data body with a key \"files\" of type \"file\".\n\n#### Response\nThe response of this request is documented as a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "pdf_to_img",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJqdGkiOiI5ODc4MjNlOS04ZGUxLTQxOTItOTY2Yy0xMjU0NmZkODlkZjYiLCJpYXQiOjE3MTMzOTkzMzgsImV4cCI6MTcxMzQwNjUzOH0.jsQkVFS8mS2ul3-fd3WAegCSViG9-8oRUG449Gcuko",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "PK49TBcxb/Lecture-4- Interaction Design.pdf"
										},
										{
											"key": "img_type",
											"value": "jpg",
											"type": "text"
										},
										{
											"key": "extract_option",
											"value": "f",
											"type": "text"
										},
										{
											"key": "image_quality",
											"value": "100",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_img",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_img"
									]
								},
								"description": "\n### PDF to Image Conversion\n\nThis endpoint allows you to convert PDF files to images.\n\n#### Request Body\n- `files` (file): The PDF file to be converted to an image.\n- `img_type` (text): The type of image format for conversion.\n- `extract_option` (text): The option for extracting images from the PDF.\n- `image_quality` (text): The quality of the output image.\n\n#### Response\nThe response for this request is a JSON schema describing the structure of the response body.\n"
							},
							"response": []
						},
						{
							"name": "pdf_to_word",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJqdGkiOiI5ODc4MjNlOS04ZGUxLTQxOTItOTY2Yy0xMjU0NmZkODlkZjYiLCJpYXQiOjE3MTMzOTkzMzgsImV4cCI6MTcxMzQwNjUzOH0.jsQkVFS8mS2ul3-fd3WAegCSViG9-8oRUG449Gcuko",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "Dra3wKhqL/Mental and Conceptual Models.pdf"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_docx",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_docx"
									]
								},
								"description": "\n### Convert PDF to DOCX\n\nThis endpoint allows you to convert a PDF file to a DOCX file.\n\n#### Request Body\n- `files` (file): The PDF file to be converted.\n\n#### Response\nThe response of this request can be documented as a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "rotate_pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJqdGkiOiI5ODc4MjNlOS04ZGUxLTQxOTItOTY2Yy0xMjU0NmZkODlkZjYiLCJpYXQiOjE3MTMzOTkzMzgsImV4cCI6MTcxMzQwNjUzOH0.jsQkVFS8mS2ul3-fd3WAegCSViG9-8oRUG449Gcuko",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "TeGa95FB9/Lecture 9 - Design prototyping and construction.pdf"
										},
										{
											"key": "rotatedPages",
											"value": "[(0,1,90), (0,2,-90), (1,3,180), (0,11,90), (0,12,-90), (0,13,100000000)]",
											"type": "text"
										},
										{
											"key": "deletedPages",
											"value": "[(0,1), (1,2), (1,3)]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rotate_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rotate_pdf"
									]
								},
								"description": "\n### Rotate PDF\nThe `rotate_pdf` endpoint is used to rotate specific pages and delete certain pages in a PDF file.\n\n#### Request Body\n- form-data\n  - `files` (file): The PDF file to be rotated.\n  - `rotatedPages` (text): Specify the pages to be rotated.\n  - `deletedPages` (text): Specify the pages to be deleted.\n\n#### Response\nThe response is a JSON object with the following properties:\n- `success` (boolean): Indicates if the operation was successful.\n- `message` (string): Provides additional information about the operation.\n- `uid` (string): Unique identifier for the processed PDF.\n\n#### Example Response\n```json\n{\n    \"success\": true,\n    \"message\": \"\",\n    \"uid\": \"\"\n}\n```\n\n#### JSON Schema\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"uid\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\"success\", \"message\", \"uid\"]\n}\n"
							},
							"response": []
						},
						{
							"name": "split_pdf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJqdGkiOiI5ODc4MjNlOS04ZGUxLTQxOTItOTY2Yy0xMjU0NmZkODlkZjYiLCJpYXQiOjE3MTMzOTkzMzgsImV4cCI6MTcxMzQwNjUzOH0.jsQkVFS8mS2ul3-fd3WAegCSViG9-8oRUG449Gcuko",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "nzZ-xcJ8r/Lecture 10 - Evaluation of Design.pdf"
										},
										{
											"key": "in_type",
											"value": "'extractPage'",
											"type": "text"
										},
										{
											"key": "fixedRange",
											"value": "",
											"type": "text"
										},
										{
											"key": "mergeOne",
											"value": "",
											"type": "text"
										},
										{
											"key": "extracted",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/split_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"split_pdf"
									]
								},
								"description": "\n# Split PDF\n\nThis endpoint makes an HTTP POST request to split a PDF file.\n\n## Request\nThe request should be sent to `{{baseUrl}}/split_pdf` with a form-data request body. The following parameters are required:\n\n- `file`: The PDF file to be split (type: file)\n- `in_type`: The type of input (type: text)\n- `fixedRange`: The fixed range for splitting (type: text)\n- `mergeOne`: (Optional) Description: (type: text)\n- `extracted`: (Optional) Description: (type: text)\n\n## Response\nThe response for this request is a JSON schema. It includes the schema for the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "update_tool_table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJqdGkiOiI5ODc4MjNlOS04ZGUxLTQxOTItOTY2Yy0xMjU0NmZkODlkZjYiLCJpYXQiOjE3MTMzOTkzMzgsImV4cCI6MTcxMzQwNjUzOH0.jsQkVFS8mS2ul3-fd3WAegCSViG9-8oRUG449Gcuko",
										"type": "text"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/update_tool_table",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"update_tool_table"
									]
								},
								"description": "\n    \n### Update Tool Table\n\nThe `update_tool_table` endpoint is used to update the tool table.\n\n#### Request\n\nThe request should be made using the HTTP POST method with a form-data request body type. The request body should include the necessary parameters to update the tool table.\n\n#### Response\n\nThe response for this request is a JSON schema. It includes the structure and data types of the response body.\n\n"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Error message\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.error).to.eql(\"Invalid bearer token.\");\r",
									"});"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 401\", () => {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Invalid Inputs",
			"item": [
				{
					"name": "add_img_watermark",
					"item": [
						{
							"name": "add_image_watermark - files(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - status and message\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('status');",
											"    pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Status is a string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.status).to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Message is a string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": []
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "255",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "150",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - files(Invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "-0diKMXNf/Lecture_9.docx"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "255",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "150",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Image_Height(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "245",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Image_Height_Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "-200",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "245",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Image_Height_Fraction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2.2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "245",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Image_Width_negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "-200",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "225",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Image_Width(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "225",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Image_Width_Fraction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2.2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "225",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Image_Position_Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "-10",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "225",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Image_Position(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "225",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Image_Position1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "10",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "225",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Rotation_Degree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "1000",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Rotation_Degree(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Rotation_Degree1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "-1000",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Rotation_Degree2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"   ",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "22.3",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Transparency_Level",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "150",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Transparency_Level(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Transparency_Level1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "-150",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Transparency_Level2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "3.3",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Watermark_level",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "255",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "123",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "150",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Watermark_level(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "255",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "150",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Page_Range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "255",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "150",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Page_Range(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "255",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Page_Range1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "255",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "-150",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_image_watermark - Page_Range2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "BoFEVXWi6/Lecture 5.pdf"
										},
										{
											"key": "image_file",
											"type": "file",
											"src": "0nIoPVriD/WhatsApp Image 2024-01-20 at 14.55.53_3ec5334d.jpg"
										},
										{
											"key": "image_height",
											"value": "2",
											"type": "text"
										},
										{
											"key": "image_width",
											"value": "2",
											"type": "text"
										},
										{
											"key": "position",
											"value": "8",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "255",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "50",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "above",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "2.2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_image_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_image_watermark"
									]
								},
								"description": "\n### Add Image Watermark\n\nThis endpoint allows the user to add an image watermark to a PDF file.\n\n#### Request Body\n- `pdf_file` (file): The PDF file to which the image watermark will be added.\n- `image_file` (file): The image file that will be used as the watermark.\n- `image_height` (text): The height of the watermark image.\n- `image_width` (text): The width of the watermark image.\n- `position` (text): The position where the watermark will be placed on the PDF file.\n- `rotation_degree` (text): The degree of rotation for the watermark image.\n- `transparency_level` (text): The transparency level of the watermark.\n- `watermark_level` (text): The level of the watermark.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "add_text_watermark",
					"item": [
						{
							"name": "add_text_watermark - Files(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": []
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Files(invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "9-yguVp9I/Lecture_9.docx"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Font_Size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "-1000",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Font_Size(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Font_Size1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "1000000",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Font_family(invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Time\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "-1000",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Font_family(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "-1000",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Font_bold(invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "12354",
											"type": "text"
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Font_italic(invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "12354",
											"type": "text"
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Font_underline(invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "135465",
											"type": "text"
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Font_Color1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Font_Color(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"   ",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "",
											"type": "text"
										},
										{
											"key": "position",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Font_Color2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"  ",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(-100,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Font_Color4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(66.3,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "5",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"   ",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "10",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Position Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"   ",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "10",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Position(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Position2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "6.3",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Rotation_Degree",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "0",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "-1000",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Rotation_Degree(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "0",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Rotation_Degree2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.uid).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "0",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "1000000",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "52",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Transparency_Level",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "9",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "150",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Transparency_Level(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.uid).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "9",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Transparency_Level1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "9",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "20.3",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Watermark_level(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "9",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "150",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "1000",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Watermark_level(invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "9",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "150",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "123456",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "1000",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Page_Range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "9",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "150",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "1000",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Page_Range(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "9",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "150",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Page_Range1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.uid).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "9",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "150",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "-1000",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "add_text_watermark - Page_Range2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "pdf_file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "LShObzHv_/CSE6275_171041007_211041006.pdf"
										},
										{
											"key": "watermark_text",
											"value": "abc",
											"type": "text"
										},
										{
											"key": "font_family",
											"value": "\"Times-Roman\"",
											"type": "text"
										},
										{
											"key": "font_bold",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_italic",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_underline",
											"value": "",
											"type": "text",
											"disabled": true
										},
										{
											"key": "font_size",
											"value": "12",
											"type": "text"
										},
										{
											"key": "font_color",
											"value": "(255,0,0)",
											"type": "text"
										},
										{
											"key": "position",
											"value": "9",
											"type": "text"
										},
										{
											"key": "rotation_degree",
											"value": "180",
											"type": "text"
										},
										{
											"key": "transparency_level",
											"value": "150",
											"type": "text"
										},
										{
											"key": "watermark_level",
											"value": "below",
											"type": "text"
										},
										{
											"key": "page_range",
											"value": "2.22",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/add_text_watermark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add_text_watermark"
									]
								},
								"description": "\n### Add Text Watermark\n\nThis endpoint allows you to add a text watermark to a PDF file.\n\n#### Request Body Parameters\n- `pdf_file` (file): The PDF file to which the watermark will be added.\n- `watermark_text` (text): The text to be used as the watermark.\n- `font_family` (text): The font family for the watermark text.\n- `font_bold` (text): Indicates if the watermark text should be bold.\n- `font_italic` (text): Indicates if the watermark text should be italicized.\n- `font_underline` (text): Indicates if the watermark text should be underlined.\n- `font_size` (text): The font size for the watermark text.\n- `font_color` (text): The color of the watermark text.\n- `position` (text): The position where the watermark will be placed on the PDF pages.\n- `rotation_degree` (text): The degree of rotation for the watermark text.\n- `transparency_level` (text): The transparency level of the watermark text.\n- `watermark_level` (text): The level of the watermark to be applied.\n- `page_range` (text): The range of pages to which the watermark will be applied.\n\n#### Response\nThe response of this request is a JSON object conforming to the specified schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"result\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "compress_pdf",
					"item": [
						{
							"name": "compress_pdf - Compress_Level",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('success');",
											"    pm.expect(responseData).to.have.property('message');",
											"    pm.expect(responseData).to.have.property('uid');",
											"});",
											"",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"",
											"pm.test(\"Message field is a string or empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.satisfy((message) => {",
											"        return typeof message === 'string' || message === '';",
											"    }, \"Message field should be a string or empty\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "KaDnZQ2GV/Lecture 8 - Applying ethnography in design.pdf"
										},
										{
											"key": "compress_level",
											"value": "rec",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/compress_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compress_pdf"
									]
								},
								"description": "\n### Compress PDF\n\nThis endpoint allows you to compress PDF files.\n\n#### Request Body\n- `files` (file): The PDF file to be compressed.\n- `compress_level` (text): The level of compression to be applied.\n\n#### Response\nThe response of this request is a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "compress_pdf - Compress_Level(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('success');",
											"    pm.expect(responseData).to.have.property('message');",
											"",
											"});",
											"",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"",
											"pm.test(\"Message field is a string or empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.satisfy((message) => {",
											"        return typeof message === 'string' || message === '';",
											"    }, \"Message field should be a string or empty\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "postman-cloud:///1ef0072d-a813-4fb0-85a3-b333ddf80372"
										},
										{
											"key": "compress_level",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/compress_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compress_pdf"
									]
								},
								"description": "\n### Compress PDF\n\nThis endpoint allows you to compress PDF files.\n\n#### Request Body\n- `files` (file): The PDF file to be compressed.\n- `compress_level` (text): The level of compression to be applied.\n\n#### Response\nThe response of this request is a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "compress_pdf - Compress_Level(invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('success');",
											"    pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"",
											"pm.test(\"Message field is a string or empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.satisfy((message) => {",
											"        return typeof message === 'string' || message === '';",
											"    }, \"Message field should be a string or empty\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "postman-cloud:///1ef0072d-a813-4fb0-85a3-b333ddf80372"
										},
										{
											"key": "compress_level",
											"value": "156465",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/compress_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compress_pdf"
									]
								},
								"description": "\n### Compress PDF\n\nThis endpoint allows you to compress PDF files.\n\n#### Request Body\n- `files` (file): The PDF file to be compressed.\n- `compress_level` (text): The level of compression to be applied.\n\n#### Response\nThe response of this request is a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "compress_pdf - files(Null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('success');",
											"    pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"",
											"pm.test(\"Message field is a string or empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.satisfy((message) => {",
											"        return typeof message === 'string' || message === '';",
											"    }, \"Message field should be a string or empty\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": []
										},
										{
											"key": "compress_level",
											"value": "rec",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/compress_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compress_pdf"
									]
								},
								"description": "\n### Compress PDF\n\nThis endpoint allows you to compress PDF files.\n\n#### Request Body\n- `files` (file): The PDF file to be compressed.\n- `compress_level` (text): The level of compression to be applied.\n\n#### Response\nThe response of this request is a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "compress_pdf - files(invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('success');",
											"    pm.expect(responseData).to.have.property('message');",
											"});",
											"",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"",
											"pm.test(\"Message field is a string or empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.satisfy((message) => {",
											"        return typeof message === 'string' || message === '';",
											"    }, \"Message field should be a string or empty\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "sRkscKrMY/Lecture_5.docx"
										},
										{
											"key": "compress_level",
											"value": "recommended",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/compress_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"compress_pdf"
									]
								},
								"description": "\n### Compress PDF\n\nThis endpoint allows you to compress PDF files.\n\n#### Request Body\n- `files` (file): The PDF file to be compressed.\n- `compress_level` (text): The level of compression to be applied.\n\n#### Response\nThe response of this request is a JSON schema.\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "merge_pdf",
					"item": [
						{
							"name": "merge_pdf - file(1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "dibV_1ZhF/Lecture 8 - Applying ethnography in design.pdf"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/merge_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"merge_pdf"
									]
								},
								"description": "\nThe `POST /merge_pdf` endpoint is used to merge multiple PDF files into a single PDF document. The request should be made to the base URL.\n\n### Request Body\nThe request should include form-data with a key \"files\" that contains the PDF files to be merged. Each file should be of type \"file\".\n\n### Response\nThe response of this request is a JSON schema describing the structure of the response data.\n"
							},
							"response": []
						},
						{
							"name": "merge_pdf - file(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/merge_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"merge_pdf"
									]
								},
								"description": "\nThe `POST /merge_pdf` endpoint is used to merge multiple PDF files into a single PDF document. The request should be made to the base URL.\n\n### Request Body\nThe request should include form-data with a key \"files\" that contains the PDF files to be merged. Each file should be of type \"file\".\n\n### Response\nThe response of this request is a JSON schema describing the structure of the response data.\n"
							},
							"response": []
						},
						{
							"name": "merge_pdf - file(invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "rj7wFX-ia/Lecture_8.docx"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/merge_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"merge_pdf"
									]
								},
								"description": "\nThe `POST /merge_pdf` endpoint is used to merge multiple PDF files into a single PDF document. The request should be made to the base URL.\n\n### Request Body\nThe request should include form-data with a key \"files\" that contains the PDF files to be merged. Each file should be of type \"file\".\n\n### Response\nThe response of this request is a JSON schema describing the structure of the response data.\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "OCR",
					"item": [
						{
							"name": "OCR - files(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message, and uid\", function () { ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": []
										},
										{
											"key": "language",
											"value": "eng",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/ocr_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ocr_pdf"
									]
								}
							},
							"response": []
						},
						{
							"name": "OCR - Language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () { ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "s5f_ipGEN/Lecture-3- The Interaction.pdf"
										},
										{
											"key": "language",
											"value": "english",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/ocr_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ocr_pdf"
									]
								}
							},
							"response": []
						},
						{
							"name": "OCR - Language1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () { ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "s5f_ipGEN/Lecture-3- The Interaction.pdf"
										},
										{
											"key": "language",
											"value": "123456",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/ocr_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ocr_pdf"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "organize_pdf",
					"item": [
						{
							"name": "organize_pdf - files(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": []
										},
										{
											"key": "ranges",
											"value": "[\"(0,1)\",\"(0,2)\"]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/organize_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organize_pdf"
									]
								},
								"description": "\n### Organize PDF\n\nThe `organize_pdf` endpoint is used to organize PDF files.\n\n#### Request Body\n- `files` (file): The PDF file to be organized.\n- `ranges` (text): A description of the ranges to be organized.\n\n#### Response\nThe response of this request is a JSON schema. The schema includes the structure and data types of the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "organize_pdf - files(invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "rJh3e7YwP/Lecture_7.docx"
										},
										{
											"key": "ranges",
											"value": "[\"(0,1)\",\"(0,2)\"]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/organize_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organize_pdf"
									]
								},
								"description": "\n### Organize PDF\n\nThe `organize_pdf` endpoint is used to organize PDF files.\n\n#### Request Body\n- `files` (file): The PDF file to be organized.\n- `ranges` (text): A description of the ranges to be organized.\n\n#### Response\nThe response of this request is a JSON schema. The schema includes the structure and data types of the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "organize_pdf - Ranges(invalid syntax)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"   ",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "2r94rIHw0/Lecture 5 - Conceptualizing Intraction.pdf"
										},
										{
											"key": "ranges",
											"value": "[\"(0,1)\",\"(0,)\"]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/organize_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organize_pdf"
									]
								},
								"description": "\n### Organize PDF\n\nThe `organize_pdf` endpoint is used to organize PDF files.\n\n#### Request Body\n- `files` (file): The PDF file to be organized.\n- `ranges` (text): A description of the ranges to be organized.\n\n#### Response\nThe response of this request is a JSON schema. The schema includes the structure and data types of the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "organize_pdf - Ranges(invalid data)1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "2r94rIHw0/Lecture 5 - Conceptualizing Intraction.pdf"
										},
										{
											"key": "ranges",
											"value": "[\"(0,1)\",\"(0,20.2)\"]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/organize_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organize_pdf"
									]
								},
								"description": "\n### Organize PDF\n\nThe `organize_pdf` endpoint is used to organize PDF files.\n\n#### Request Body\n- `files` (file): The PDF file to be organized.\n- `ranges` (text): A description of the ranges to be organized.\n\n#### Response\nThe response of this request is a JSON schema. The schema includes the structure and data types of the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "organize_pdf - Ranges(invalid value)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "2r94rIHw0/Lecture 5 - Conceptualizing Intraction.pdf"
										},
										{
											"key": "ranges",
											"value": "[\"(0,1)\",\"(0,-2)\"]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/organize_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organize_pdf"
									]
								},
								"description": "\n### Organize PDF\n\nThe `organize_pdf` endpoint is used to organize PDF files.\n\n#### Request Body\n- `files` (file): The PDF file to be organized.\n- `ranges` (text): A description of the ranges to be organized.\n\n#### Response\nThe response of this request is a JSON schema. The schema includes the structure and data types of the response body.\n\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "pdf_to_excel",
					"item": [
						{
							"name": "pdf_to_xlsx - Files(Null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_xlsx",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_xlsx"
									]
								},
								"description": "\n### PDF to XLSX Conversion\n\nThis API endpoint makes an HTTP POST request to convert PDF files to XLSX format. The request should be sent to `{{baseUrl}}/pdf_to_xlsx`.\n\n#### Request Body\n- The request should have a form-data body with a key \"files\" of type \"file\".\n\n#### Response\nThe response of this request is documented as a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "pdf_to_xlsx - Files(Invalid_format)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "gsGt20JQj/Lecture_8.docx"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_xlsx",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_xlsx"
									]
								},
								"description": "\n### PDF to XLSX Conversion\n\nThis API endpoint makes an HTTP POST request to convert PDF files to XLSX format. The request should be sent to `{{baseUrl}}/pdf_to_xlsx`.\n\n#### Request Body\n- The request should have a form-data body with a key \"files\" of type \"file\".\n\n#### Response\nThe response of this request is documented as a JSON schema.\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "pdf_to_img",
					"item": [
						{
							"name": "pdf_to_img - Image_Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    ",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "PK49TBcxb/Lecture-4- Interaction Design.pdf"
										},
										{
											"key": "img_type",
											"value": "Jpeg",
											"type": "text"
										},
										{
											"key": "extract_option",
											"value": "f",
											"type": "text"
										},
										{
											"key": "image_quality",
											"value": "100",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_img",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_img"
									]
								},
								"description": "\n### PDF to Image Conversion\n\nThis endpoint allows you to convert PDF files to images.\n\n#### Request Body\n- `files` (file): The PDF file to be converted to an image.\n- `img_type` (text): The type of image format for conversion.\n- `extract_option` (text): The option for extracting images from the PDF.\n- `image_quality` (text): The quality of the output image.\n\n#### Response\nThe response for this request is a JSON schema describing the structure of the response body.\n"
							},
							"response": []
						},
						{
							"name": "pdf_to_img - files(Null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.uid).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": []
										},
										{
											"key": "img_type",
											"value": "Jpeg",
											"type": "text"
										},
										{
											"key": "extract_option",
											"value": "f",
											"type": "text"
										},
										{
											"key": "image_quality",
											"value": "100",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_img",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_img"
									]
								},
								"description": "\n### PDF to Image Conversion\n\nThis endpoint allows you to convert PDF files to images.\n\n#### Request Body\n- `files` (file): The PDF file to be converted to an image.\n- `img_type` (text): The type of image format for conversion.\n- `extract_option` (text): The option for extracting images from the PDF.\n- `image_quality` (text): The quality of the output image.\n\n#### Response\nThe response for this request is a JSON schema describing the structure of the response body.\n"
							},
							"response": []
						},
						{
							"name": "pdf_to_img - Files(invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "PK49TBcxb/Lecture-4- Interaction Design.pdf"
										},
										{
											"key": "img_type",
											"value": "Jpeg",
											"type": "text"
										},
										{
											"key": "extract_option",
											"value": "f",
											"type": "text"
										},
										{
											"key": "image_quality",
											"value": "100",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_img",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_img"
									]
								},
								"description": "\n### PDF to Image Conversion\n\nThis endpoint allows you to convert PDF files to images.\n\n#### Request Body\n- `files` (file): The PDF file to be converted to an image.\n- `img_type` (text): The type of image format for conversion.\n- `extract_option` (text): The option for extracting images from the PDF.\n- `image_quality` (text): The quality of the output image.\n\n#### Response\nThe response for this request is a JSON schema describing the structure of the response body.\n"
							},
							"response": []
						},
						{
							"name": "pdf_to_img - Extract_Option",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "PK49TBcxb/Lecture-4- Interaction Design.pdf"
										},
										{
											"key": "img_type",
											"value": "jpg",
											"type": "text"
										},
										{
											"key": "extract_option",
											"value": "qwe",
											"type": "text"
										},
										{
											"key": "image_quality",
											"value": "100",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_img",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_img"
									]
								},
								"description": "\n### PDF to Image Conversion\n\nThis endpoint allows you to convert PDF files to images.\n\n#### Request Body\n- `files` (file): The PDF file to be converted to an image.\n- `img_type` (text): The type of image format for conversion.\n- `extract_option` (text): The option for extracting images from the PDF.\n- `image_quality` (text): The quality of the output image.\n\n#### Response\nThe response for this request is a JSON schema describing the structure of the response body.\n"
							},
							"response": []
						},
						{
							"name": "pdf_to_img - Extract_Option1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "PK49TBcxb/Lecture-4- Interaction Design.pdf"
										},
										{
											"key": "img_type",
											"value": "jpg",
											"type": "text"
										},
										{
											"key": "extract_option",
											"value": "12354",
											"type": "text"
										},
										{
											"key": "image_quality",
											"value": "100",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_img",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_img"
									]
								},
								"description": "\n### PDF to Image Conversion\n\nThis endpoint allows you to convert PDF files to images.\n\n#### Request Body\n- `files` (file): The PDF file to be converted to an image.\n- `img_type` (text): The type of image format for conversion.\n- `extract_option` (text): The option for extracting images from the PDF.\n- `image_quality` (text): The quality of the output image.\n\n#### Response\nThe response for this request is a JSON schema describing the structure of the response body.\n"
							},
							"response": []
						},
						{
							"name": "pdf_to_img - Extract_Option(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "PK49TBcxb/Lecture-4- Interaction Design.pdf"
										},
										{
											"key": "img_type",
											"value": "jpg",
											"type": "text"
										},
										{
											"key": "extract_option",
											"value": "",
											"type": "text"
										},
										{
											"key": "image_quality",
											"value": "100",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_img",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_img"
									]
								},
								"description": "\n### PDF to Image Conversion\n\nThis endpoint allows you to convert PDF files to images.\n\n#### Request Body\n- `files` (file): The PDF file to be converted to an image.\n- `img_type` (text): The type of image format for conversion.\n- `extract_option` (text): The option for extracting images from the PDF.\n- `image_quality` (text): The quality of the output image.\n\n#### Response\nThe response for this request is a JSON schema describing the structure of the response body.\n"
							},
							"response": []
						},
						{
							"name": "pdf_to_img - Image_Quality",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "PK49TBcxb/Lecture-4- Interaction Design.pdf"
										},
										{
											"key": "img_type",
											"value": "jpg",
											"type": "text"
										},
										{
											"key": "extract_option",
											"value": "\"full page\"",
											"type": "text"
										},
										{
											"key": "image_quality",
											"value": "-1000",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_img",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_img"
									]
								},
								"description": "\n### PDF to Image Conversion\n\nThis endpoint allows you to convert PDF files to images.\n\n#### Request Body\n- `files` (file): The PDF file to be converted to an image.\n- `img_type` (text): The type of image format for conversion.\n- `extract_option` (text): The option for extracting images from the PDF.\n- `image_quality` (text): The quality of the output image.\n\n#### Response\nThe response for this request is a JSON schema describing the structure of the response body.\n"
							},
							"response": []
						},
						{
							"name": "pdf_to_img - Image_Quality1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "PK49TBcxb/Lecture-4- Interaction Design.pdf"
										},
										{
											"key": "img_type",
											"value": "jpg",
											"type": "text"
										},
										{
											"key": "extract_option",
											"value": "\"full page\"",
											"type": "text"
										},
										{
											"key": "image_quality",
											"value": "456867445",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_img",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_img"
									]
								},
								"description": "\n### PDF to Image Conversion\n\nThis endpoint allows you to convert PDF files to images.\n\n#### Request Body\n- `files` (file): The PDF file to be converted to an image.\n- `img_type` (text): The type of image format for conversion.\n- `extract_option` (text): The option for extracting images from the PDF.\n- `image_quality` (text): The quality of the output image.\n\n#### Response\nThe response for this request is a JSON schema describing the structure of the response body.\n"
							},
							"response": []
						},
						{
							"name": "pdf_to_img - Image_Quality1 Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "PK49TBcxb/Lecture-4- Interaction Design.pdf"
										},
										{
											"key": "img_type",
											"value": "jpg",
											"type": "text"
										},
										{
											"key": "extract_option",
											"value": "\"full page\"",
											"type": "text"
										},
										{
											"key": "image_quality",
											"value": "36.3",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_img",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_img"
									]
								},
								"description": "\n### PDF to Image Conversion\n\nThis endpoint allows you to convert PDF files to images.\n\n#### Request Body\n- `files` (file): The PDF file to be converted to an image.\n- `img_type` (text): The type of image format for conversion.\n- `extract_option` (text): The option for extracting images from the PDF.\n- `image_quality` (text): The quality of the output image.\n\n#### Response\nThe response for this request is a JSON schema describing the structure of the response body.\n"
							},
							"response": []
						},
						{
							"name": "pdf_to_img - Image_Quality(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "PK49TBcxb/Lecture-4- Interaction Design.pdf"
										},
										{
											"key": "img_type",
											"value": "jpg",
											"type": "text"
										},
										{
											"key": "extract_option",
											"value": "\"full page\"",
											"type": "text"
										},
										{
											"key": "image_quality",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_img",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_img"
									]
								},
								"description": "\n### PDF to Image Conversion\n\nThis endpoint allows you to convert PDF files to images.\n\n#### Request Body\n- `files` (file): The PDF file to be converted to an image.\n- `img_type` (text): The type of image format for conversion.\n- `extract_option` (text): The option for extracting images from the PDF.\n- `image_quality` (text): The quality of the output image.\n\n#### Response\nThe response for this request is a JSON schema describing the structure of the response body.\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "pdf_to_word",
					"item": [
						{
							"name": "pdf_to_word - Files(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"  ",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": []
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_docx",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_docx"
									]
								},
								"description": "\n### Convert PDF to DOCX\n\nThis endpoint allows you to convert a PDF file to a DOCX file.\n\n#### Request Body\n- `files` (file): The PDF file to be converted.\n\n#### Response\nThe response of this request can be documented as a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "pdf_to_word - Files(Invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "3OXf_ikZV/Lecture_9.docx"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pdf_to_docx",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf_to_docx"
									]
								},
								"description": "\n### Convert PDF to DOCX\n\nThis endpoint allows you to convert a PDF file to a DOCX file.\n\n#### Request Body\n- `files` (file): The PDF file to be converted.\n\n#### Response\nThe response of this request can be documented as a JSON schema.\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "rotate_pdf",
					"item": [
						{
							"name": "rotate_pdf - Files(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": []
										},
										{
											"key": "rotatedPages",
											"value": "[(0,1,90), (0,2,-90), (1,3,180), (0,11,90), (0,12,-90), (0,13,100000000)]",
											"type": "text"
										},
										{
											"key": "deletedPages",
											"value": "[(0,1), (1,2), (1,3)]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rotate_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rotate_pdf"
									]
								},
								"description": "\n### Rotate PDF\nThe `rotate_pdf` endpoint is used to rotate specific pages and delete certain pages in a PDF file.\n\n#### Request Body\n- form-data\n  - `files` (file): The PDF file to be rotated.\n  - `rotatedPages` (text): Specify the pages to be rotated.\n  - `deletedPages` (text): Specify the pages to be deleted.\n\n#### Response\nThe response is a JSON object with the following properties:\n- `success` (boolean): Indicates if the operation was successful.\n- `message` (string): Provides additional information about the operation.\n- `uid` (string): Unique identifier for the processed PDF.\n\n#### Example Response\n```json\n{\n    \"success\": true,\n    \"message\": \"\",\n    \"uid\": \"\"\n}\n```\n\n#### JSON Schema\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"uid\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\"success\", \"message\", \"uid\"]\n}\n"
							},
							"response": []
						},
						{
							"name": "rotate_pdf - Files(invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message, and uid\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"   ",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "TeGa95FB9/Lecture 9 - Design prototyping and construction.pdf"
										},
										{
											"key": "rotatedPages",
											"value": "[(0,1,90), (0,2,-90), (1,3,180), (0,11,90), (0,12,-90), (0,13,100000000)]",
											"type": "text"
										},
										{
											"key": "deletedPages",
											"value": "[(0,1), (1,2), (1,3)]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rotate_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rotate_pdf"
									]
								},
								"description": "\n### Rotate PDF\nThe `rotate_pdf` endpoint is used to rotate specific pages and delete certain pages in a PDF file.\n\n#### Request Body\n- form-data\n  - `files` (file): The PDF file to be rotated.\n  - `rotatedPages` (text): Specify the pages to be rotated.\n  - `deletedPages` (text): Specify the pages to be deleted.\n\n#### Response\nThe response is a JSON object with the following properties:\n- `success` (boolean): Indicates if the operation was successful.\n- `message` (string): Provides additional information about the operation.\n- `uid` (string): Unique identifier for the processed PDF.\n\n#### Example Response\n```json\n{\n    \"success\": true,\n    \"message\": \"\",\n    \"uid\": \"\"\n}\n```\n\n#### JSON Schema\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"uid\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\"success\", \"message\", \"uid\"]\n}\n"
							},
							"response": []
						},
						{
							"name": "rotate_pdf - (rotated_Pages_invalid_format)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											" ",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "TeGa95FB9/Lecture 9 - Design prototyping and construction.pdf"
										},
										{
											"key": "rotatedPages",
											"value": "[(0,1,90), (0,2,-90), (1,3,180), (0,11,90), (0,12,-90), (0,13,)]",
											"type": "text"
										},
										{
											"key": "deletedPages",
											"value": "[(0,1), (1,2), (1,3)]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rotate_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rotate_pdf"
									]
								},
								"description": "\n### Rotate PDF\nThe `rotate_pdf` endpoint is used to rotate specific pages and delete certain pages in a PDF file.\n\n#### Request Body\n- form-data\n  - `files` (file): The PDF file to be rotated.\n  - `rotatedPages` (text): Specify the pages to be rotated.\n  - `deletedPages` (text): Specify the pages to be deleted.\n\n#### Response\nThe response is a JSON object with the following properties:\n- `success` (boolean): Indicates if the operation was successful.\n- `message` (string): Provides additional information about the operation.\n- `uid` (string): Unique identifier for the processed PDF.\n\n#### Example Response\n```json\n{\n    \"success\": true,\n    \"message\": \"\",\n    \"uid\": \"\"\n}\n```\n\n#### JSON Schema\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"uid\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\"success\", \"message\", \"uid\"]\n}\n"
							},
							"response": []
						},
						{
							"name": "rotate_pdf - (rotated_Pages_invalid_data)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "TeGa95FB9/Lecture 9 - Design prototyping and construction.pdf"
										},
										{
											"key": "rotatedPages",
											"value": "[(0,1,90), (0,2,-90), (1,3,180), (0,11,90), (0,12,-90), (0,13,1000000)]",
											"type": "text"
										},
										{
											"key": "deletedPages",
											"value": "[(0,1), (1,2), (1,3)]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rotate_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rotate_pdf"
									]
								},
								"description": "\n### Rotate PDF\nThe `rotate_pdf` endpoint is used to rotate specific pages and delete certain pages in a PDF file.\n\n#### Request Body\n- form-data\n  - `files` (file): The PDF file to be rotated.\n  - `rotatedPages` (text): Specify the pages to be rotated.\n  - `deletedPages` (text): Specify the pages to be deleted.\n\n#### Response\nThe response is a JSON object with the following properties:\n- `success` (boolean): Indicates if the operation was successful.\n- `message` (string): Provides additional information about the operation.\n- `uid` (string): Unique identifier for the processed PDF.\n\n#### Example Response\n```json\n{\n    \"success\": true,\n    \"message\": \"\",\n    \"uid\": \"\"\n}\n```\n\n#### JSON Schema\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"uid\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\"success\", \"message\", \"uid\"]\n}\n"
							},
							"response": []
						},
						{
							"name": "rotate_pdf - (rotated_Pages_invalid_data)1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": []
										},
										{
											"key": "rotatedPages",
											"value": "[(0,1,90), (0,2,-90), (1,3,180), (0,11,90), (0,12,-90), (0,13,10000000)",
											"type": "text"
										},
										{
											"key": "deletedPages",
											"value": "[(0,1), (1,2), (1,3)]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rotate_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rotate_pdf"
									]
								},
								"description": "\n### Rotate PDF\nThe `rotate_pdf` endpoint is used to rotate specific pages and delete certain pages in a PDF file.\n\n#### Request Body\n- form-data\n  - `files` (file): The PDF file to be rotated.\n  - `rotatedPages` (text): Specify the pages to be rotated.\n  - `deletedPages` (text): Specify the pages to be deleted.\n\n#### Response\nThe response is a JSON object with the following properties:\n- `success` (boolean): Indicates if the operation was successful.\n- `message` (string): Provides additional information about the operation.\n- `uid` (string): Unique identifier for the processed PDF.\n\n#### Example Response\n```json\n{\n    \"success\": true,\n    \"message\": \"\",\n    \"uid\": \"\"\n}\n```\n\n#### JSON Schema\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"uid\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\"success\", \"message\", \"uid\"]\n}\n"
							},
							"response": []
						},
						{
							"name": "rotate_pdf - (rotated_Pages)null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": []
										},
										{
											"key": "rotatedPages",
											"value": "",
											"type": "text"
										},
										{
											"key": "deletedPages",
											"value": "[(0,1), (1,2), (1,3)]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rotate_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rotate_pdf"
									]
								},
								"description": "\n### Rotate PDF\nThe `rotate_pdf` endpoint is used to rotate specific pages and delete certain pages in a PDF file.\n\n#### Request Body\n- form-data\n  - `files` (file): The PDF file to be rotated.\n  - `rotatedPages` (text): Specify the pages to be rotated.\n  - `deletedPages` (text): Specify the pages to be deleted.\n\n#### Response\nThe response is a JSON object with the following properties:\n- `success` (boolean): Indicates if the operation was successful.\n- `message` (string): Provides additional information about the operation.\n- `uid` (string): Unique identifier for the processed PDF.\n\n#### Example Response\n```json\n{\n    \"success\": true,\n    \"message\": \"\",\n    \"uid\": \"\"\n}\n```\n\n#### JSON Schema\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"uid\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\"success\", \"message\", \"uid\"]\n}\n"
							},
							"response": []
						},
						{
							"name": "rotate_pdf - (Deleted_Pages_invalid_format)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"   ",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "TeGa95FB9/Lecture 9 - Design prototyping and construction.pdf"
										},
										{
											"key": "rotatedPages",
											"value": "[(0,1,90), (0,2,-90), (1,3,180), (0,11,90), (0,12,-90), (0,13,1000000)]",
											"type": "text"
										},
										{
											"key": "deletedPages",
											"value": "[(0,1), (,2), (1,)]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rotate_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rotate_pdf"
									]
								},
								"description": "\n### Rotate PDF\nThe `rotate_pdf` endpoint is used to rotate specific pages and delete certain pages in a PDF file.\n\n#### Request Body\n- form-data\n  - `files` (file): The PDF file to be rotated.\n  - `rotatedPages` (text): Specify the pages to be rotated.\n  - `deletedPages` (text): Specify the pages to be deleted.\n\n#### Response\nThe response is a JSON object with the following properties:\n- `success` (boolean): Indicates if the operation was successful.\n- `message` (string): Provides additional information about the operation.\n- `uid` (string): Unique identifier for the processed PDF.\n\n#### Example Response\n```json\n{\n    \"success\": true,\n    \"message\": \"\",\n    \"uid\": \"\"\n}\n```\n\n#### JSON Schema\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"uid\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\"success\", \"message\", \"uid\"]\n}\n"
							},
							"response": []
						},
						{
							"name": "rotate_pdf - (Deleted_Pages_invalid_data)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "TeGa95FB9/Lecture 9 - Design prototyping and construction.pdf"
										},
										{
											"key": "rotatedPages",
											"value": "[(0,1,90), (0,2,-90), (1,3,180), (0,11,90), (0,12,-90), (0,13,1000000)]",
											"type": "text"
										},
										{
											"key": "deletedPages",
											"value": "[(0,1), (,2), (1,-500)]",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rotate_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rotate_pdf"
									]
								},
								"description": "\n### Rotate PDF\nThe `rotate_pdf` endpoint is used to rotate specific pages and delete certain pages in a PDF file.\n\n#### Request Body\n- form-data\n  - `files` (file): The PDF file to be rotated.\n  - `rotatedPages` (text): Specify the pages to be rotated.\n  - `deletedPages` (text): Specify the pages to be deleted.\n\n#### Response\nThe response is a JSON object with the following properties:\n- `success` (boolean): Indicates if the operation was successful.\n- `message` (string): Provides additional information about the operation.\n- `uid` (string): Unique identifier for the processed PDF.\n\n#### Example Response\n```json\n{\n    \"success\": true,\n    \"message\": \"\",\n    \"uid\": \"\"\n}\n```\n\n#### JSON Schema\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"uid\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\"success\", \"message\", \"uid\"]\n}\n"
							},
							"response": []
						},
						{
							"name": "rotate_pdf - (Deleted_Pages_null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											"",
											"var template = `",
											"<style type=\"text/css\">",
											"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
											"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
											"    .tftable tr {background-color:#ffffff;}",
											"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
											"    .tftable tr:hover {background-color:#e0ffff;}",
											"</style>",
											"",
											"<table class=\"tftable\" border=\"1\">",
											"    <tr>",
											"        <th>Success</th>",
											"        <th>Message</th>",
											"        <th>UID</th>",
											"    </tr>",
											"    <tr>",
											"        <td>{{response.success}}</td>",
											"        <td>{{response.message}}</td>",
											"        <td>{{response.uid}}</td>",
											"    </tr>",
											"</table>",
											"`;",
											"",
											"function constructVisualizerPayload() {",
											"    return {response: pm.response.json()}",
											"}",
											"",
											"pm.visualizer.set(template, constructVisualizerPayload());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "TeGa95FB9/Lecture 9 - Design prototyping and construction.pdf"
										},
										{
											"key": "rotatedPages",
											"value": "[(0,1,90), (0,2,-90), (1,3,180), (0,11,90), (0,12,-90), (0,13,1000000)]",
											"type": "text"
										},
										{
											"key": "deletedPages",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/rotate_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rotate_pdf"
									]
								},
								"description": "\n### Rotate PDF\nThe `rotate_pdf` endpoint is used to rotate specific pages and delete certain pages in a PDF file.\n\n#### Request Body\n- form-data\n  - `files` (file): The PDF file to be rotated.\n  - `rotatedPages` (text): Specify the pages to be rotated.\n  - `deletedPages` (text): Specify the pages to be deleted.\n\n#### Response\nThe response is a JSON object with the following properties:\n- `success` (boolean): Indicates if the operation was successful.\n- `message` (string): Provides additional information about the operation.\n- `uid` (string): Unique identifier for the processed PDF.\n\n#### Example Response\n```json\n{\n    \"success\": true,\n    \"message\": \"\",\n    \"uid\": \"\"\n}\n```\n\n#### JSON Schema\n```json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"success\": {\n            \"type\": \"boolean\"\n        },\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"uid\": {\n            \"type\": \"string\"\n        }\n    },\n    \"required\": [\"success\", \"message\", \"uid\"]\n}\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "language",
					"item": [
						{
							"name": "get_language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"Auth_token\", data.token);",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate response matches the defined schema\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    // Add specific property checks here based on the defined schema",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/language?lang=nlp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"language"
									],
									"query": [
										{
											"key": "lang",
											"value": "nlp"
										}
									]
								},
								"description": "\n# Language API\n\nThis API endpoint makes an HTTP GET request to retrieve language information.\n\n### Request\n\nThe request should be sent to `{{baseUrl}}/language` using the form-data request body type. The following parameter should be included:\n\n- `lang` (text): [Description of the parameter]\n\n### Response\n\nThe response of this request is a JSON object conforming to the following schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    // Define the properties of the response object here\n  }\n}\n```\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "split_pdf",
					"item": [
						{
							"name": "split_pdf - files(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": []
										},
										{
											"key": "in_type",
											"value": "'extractPage'",
											"type": "text"
										},
										{
											"key": "fixedRange",
											"value": "",
											"type": "text"
										},
										{
											"key": "mergeOne",
											"value": "",
											"type": "text"
										},
										{
											"key": "extracted",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/split_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"split_pdf"
									]
								},
								"description": "\n# Split PDF\n\nThis endpoint makes an HTTP POST request to split a PDF file.\n\n## Request\nThe request should be sent to `{{baseUrl}}/split_pdf` with a form-data request body. The following parameters are required:\n\n- `file`: The PDF file to be split (type: file)\n- `in_type`: The type of input (type: text)\n- `fixedRange`: The fixed range for splitting (type: text)\n- `mergeOne`: (Optional) Description: (type: text)\n- `extracted`: (Optional) Description: (type: text)\n\n## Response\nThe response for this request is a JSON schema. It includes the schema for the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "split_pdf - files(invalid-Input)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "iNP-Kq3sQ/Lecture_9.docx"
										},
										{
											"key": "in_type",
											"value": "'extractPage'",
											"type": "text"
										},
										{
											"key": "fixedRange",
											"value": "",
											"type": "text"
										},
										{
											"key": "mergeOne",
											"value": "",
											"type": "text"
										},
										{
											"key": "extracted",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/split_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"split_pdf"
									]
								},
								"description": "\n# Split PDF\n\nThis endpoint makes an HTTP POST request to split a PDF file.\n\n## Request\nThe request should be sent to `{{baseUrl}}/split_pdf` with a form-data request body. The following parameters are required:\n\n- `file`: The PDF file to be split (type: file)\n- `in_type`: The type of input (type: text)\n- `fixedRange`: The fixed range for splitting (type: text)\n- `mergeOne`: (Optional) Description: (type: text)\n- `extracted`: (Optional) Description: (type: text)\n\n## Response\nThe response for this request is a JSON schema. It includes the schema for the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "split_pdf - fixed_Range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "nzZ-xcJ8r/Lecture 10 - Evaluation of Design.pdf"
										},
										{
											"key": "in_type",
											"value": "'extractPage'",
											"type": "text"
										},
										{
											"key": "fixedRange",
											"value": "-10000",
											"type": "text"
										},
										{
											"key": "mergeOne",
											"value": "",
											"type": "text"
										},
										{
											"key": "extracted",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/split_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"split_pdf"
									]
								},
								"description": "\n# Split PDF\n\nThis endpoint makes an HTTP POST request to split a PDF file.\n\n## Request\nThe request should be sent to `{{baseUrl}}/split_pdf` with a form-data request body. The following parameters are required:\n\n- `file`: The PDF file to be split (type: file)\n- `in_type`: The type of input (type: text)\n- `fixedRange`: The fixed range for splitting (type: text)\n- `mergeOne`: (Optional) Description: (type: text)\n- `extracted`: (Optional) Description: (type: text)\n\n## Response\nThe response for this request is a JSON schema. It includes the schema for the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "split_pdf - fixed_Range(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"   ",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "nzZ-xcJ8r/Lecture 10 - Evaluation of Design.pdf"
										},
										{
											"key": "in_type",
											"value": "'extractPage'",
											"type": "text"
										},
										{
											"key": "fixedRange",
											"value": "",
											"type": "text"
										},
										{
											"key": "mergeOne",
											"value": "",
											"type": "text"
										},
										{
											"key": "extracted",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/split_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"split_pdf"
									]
								},
								"description": "\n# Split PDF\n\nThis endpoint makes an HTTP POST request to split a PDF file.\n\n## Request\nThe request should be sent to `{{baseUrl}}/split_pdf` with a form-data request body. The following parameters are required:\n\n- `file`: The PDF file to be split (type: file)\n- `in_type`: The type of input (type: text)\n- `fixedRange`: The fixed range for splitting (type: text)\n- `mergeOne`: (Optional) Description: (type: text)\n- `extracted`: (Optional) Description: (type: text)\n\n## Response\nThe response for this request is a JSON schema. It includes the schema for the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "split_pdf - fixed_Range1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    ",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "nzZ-xcJ8r/Lecture 10 - Evaluation of Design.pdf"
										},
										{
											"key": "in_type",
											"value": "'extractPage'",
											"type": "text"
										},
										{
											"key": "fixedRange",
											"value": "2.33664",
											"type": "text"
										},
										{
											"key": "mergeOne",
											"value": "",
											"type": "text"
										},
										{
											"key": "extracted",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/split_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"split_pdf"
									]
								},
								"description": "\n# Split PDF\n\nThis endpoint makes an HTTP POST request to split a PDF file.\n\n## Request\nThe request should be sent to `{{baseUrl}}/split_pdf` with a form-data request body. The following parameters are required:\n\n- `file`: The PDF file to be split (type: file)\n- `in_type`: The type of input (type: text)\n- `fixedRange`: The fixed range for splitting (type: text)\n- `mergeOne`: (Optional) Description: (type: text)\n- `extracted`: (Optional) Description: (type: text)\n\n## Response\nThe response for this request is a JSON schema. It includes the schema for the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "split_pdf - fixed_Range2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "nzZ-xcJ8r/Lecture 10 - Evaluation of Design.pdf"
										},
										{
											"key": "in_type",
											"value": "'extractPage'",
											"type": "text"
										},
										{
											"key": "fixedRange",
											"value": "akjshdkjasdjk",
											"type": "text"
										},
										{
											"key": "mergeOne",
											"value": "",
											"type": "text"
										},
										{
											"key": "extracted",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/split_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"split_pdf"
									]
								},
								"description": "\n# Split PDF\n\nThis endpoint makes an HTTP POST request to split a PDF file.\n\n## Request\nThe request should be sent to `{{baseUrl}}/split_pdf` with a form-data request body. The following parameters are required:\n\n- `file`: The PDF file to be split (type: file)\n- `in_type`: The type of input (type: text)\n- `fixedRange`: The fixed range for splitting (type: text)\n- `mergeOne`: (Optional) Description: (type: text)\n- `extracted`: (Optional) Description: (type: text)\n\n## Response\nThe response for this request is a JSON schema. It includes the schema for the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "split_pdf - extracted(invalid_data)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    ",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "nzZ-xcJ8r/Lecture 10 - Evaluation of Design.pdf"
										},
										{
											"key": "in_type",
											"value": "'extractPage'",
											"type": "text"
										},
										{
											"key": "fixedRange",
											"value": "10",
											"type": "text"
										},
										{
											"key": "mergeOne",
											"value": "",
											"type": "text"
										},
										{
											"key": "extracted",
											"value": "(1,4,5,6,7,8,9,10,12,13,14,-15,17,18,19)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/split_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"split_pdf"
									]
								},
								"description": "\n# Split PDF\n\nThis endpoint makes an HTTP POST request to split a PDF file.\n\n## Request\nThe request should be sent to `{{baseUrl}}/split_pdf` with a form-data request body. The following parameters are required:\n\n- `file`: The PDF file to be split (type: file)\n- `in_type`: The type of input (type: text)\n- `fixedRange`: The fixed range for splitting (type: text)\n- `mergeOne`: (Optional) Description: (type: text)\n- `extracted`: (Optional) Description: (type: text)\n\n## Response\nThe response for this request is a JSON schema. It includes the schema for the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "split_pdf - extracted(invalid_format)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "nzZ-xcJ8r/Lecture 10 - Evaluation of Design.pdf"
										},
										{
											"key": "in_type",
											"value": "'extractPage'",
											"type": "text"
										},
										{
											"key": "fixedRange",
											"value": "10",
											"type": "text"
										},
										{
											"key": "mergeOne",
											"value": "",
											"type": "text"
										},
										{
											"key": "extracted",
											"value": "4,5,6,7,8,9,10,12,13,14,-15,17,18,19",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/split_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"split_pdf"
									]
								},
								"description": "\n# Split PDF\n\nThis endpoint makes an HTTP POST request to split a PDF file.\n\n## Request\nThe request should be sent to `{{baseUrl}}/split_pdf` with a form-data request body. The following parameters are required:\n\n- `file`: The PDF file to be split (type: file)\n- `in_type`: The type of input (type: text)\n- `fixedRange`: The fixed range for splitting (type: text)\n- `mergeOne`: (Optional) Description: (type: text)\n- `extracted`: (Optional) Description: (type: text)\n\n## Response\nThe response for this request is a JSON schema. It includes the schema for the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "split_pdf - extracted(invalid_data)1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"   ",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "nzZ-xcJ8r/Lecture 10 - Evaluation of Design.pdf"
										},
										{
											"key": "in_type",
											"value": "'extractPage'",
											"type": "text"
										},
										{
											"key": "fixedRange",
											"value": "10",
											"type": "text"
										},
										{
											"key": "mergeOne",
											"value": "",
											"type": "text"
										},
										{
											"key": "extracted",
											"value": "(-100000,5,6,7,8,9,10,12,13,14,-15,17,18,19)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/split_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"split_pdf"
									]
								},
								"description": "\n# Split PDF\n\nThis endpoint makes an HTTP POST request to split a PDF file.\n\n## Request\nThe request should be sent to `{{baseUrl}}/split_pdf` with a form-data request body. The following parameters are required:\n\n- `file`: The PDF file to be split (type: file)\n- `in_type`: The type of input (type: text)\n- `fixedRange`: The fixed range for splitting (type: text)\n- `mergeOne`: (Optional) Description: (type: text)\n- `extracted`: (Optional) Description: (type: text)\n\n## Response\nThe response for this request is a JSON schema. It includes the schema for the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "split_pdf - extracted(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    ",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "nzZ-xcJ8r/Lecture 10 - Evaluation of Design.pdf"
										},
										{
											"key": "in_type",
											"value": "'extractPage'",
											"type": "text"
										},
										{
											"key": "fixedRange",
											"value": "10",
											"type": "text"
										},
										{
											"key": "mergeOne",
											"value": "",
											"type": "text"
										},
										{
											"key": "extracted",
											"value": "",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/split_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"split_pdf"
									]
								},
								"description": "\n# Split PDF\n\nThis endpoint makes an HTTP POST request to split a PDF file.\n\n## Request\nThe request should be sent to `{{baseUrl}}/split_pdf` with a form-data request body. The following parameters are required:\n\n- `file`: The PDF file to be split (type: file)\n- `in_type`: The type of input (type: text)\n- `fixedRange`: The fixed range for splitting (type: text)\n- `mergeOne`: (Optional) Description: (type: text)\n- `extracted`: (Optional) Description: (type: text)\n\n## Response\nThe response for this request is a JSON schema. It includes the schema for the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "split_pdf - mergeOne(null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 400\", function () {",
											"  pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"   ",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "nzZ-xcJ8r/Lecture 10 - Evaluation of Design.pdf"
										},
										{
											"key": "in_type",
											"value": "'extractPage'",
											"type": "text"
										},
										{
											"key": "fixedRange",
											"value": "10",
											"type": "text"
										},
										{
											"key": "mergeOne",
											"value": "",
											"type": "text"
										},
										{
											"key": "extracted",
											"value": "(-100000,5,6,7,8,9,10,12,13,14,-15,17,18,19)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/split_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"split_pdf"
									]
								},
								"description": "\n# Split PDF\n\nThis endpoint makes an HTTP POST request to split a PDF file.\n\n## Request\nThe request should be sent to `{{baseUrl}}/split_pdf` with a form-data request body. The following parameters are required:\n\n- `file`: The PDF file to be split (type: file)\n- `in_type`: The type of input (type: text)\n- `fixedRange`: The fixed range for splitting (type: text)\n- `mergeOne`: (Optional) Description: (type: text)\n- `extracted`: (Optional) Description: (type: text)\n\n## Response\nThe response for this request is a JSON schema. It includes the schema for the response body.\n\n"
							},
							"response": []
						},
						{
							"name": "split_pdf - mergeOne(invalid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"",
											"pm.test(\"Response status code is 422\", function () {",
											"  pm.expect(pm.response.code).to.equal(422);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has required fields - success, message\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"   ",
											"});",
											"",
											"pm.test(\"Success field is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "nzZ-xcJ8r/Lecture 10 - Evaluation of Design.pdf"
										},
										{
											"key": "in_type",
											"value": "'extractPage'",
											"type": "text"
										},
										{
											"key": "fixedRange",
											"value": "10",
											"type": "text"
										},
										{
											"key": "mergeOne",
											"value": "aksjgdkagsdjo",
											"type": "text"
										},
										{
											"key": "extracted",
											"value": "(-100000,5,6,7,8,9,10,12,13,14,-15,17,18,19)",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/split_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"split_pdf"
									]
								},
								"description": "\n# Split PDF\n\nThis endpoint makes an HTTP POST request to split a PDF file.\n\n## Request\nThe request should be sent to `{{baseUrl}}/split_pdf` with a form-data request body. The following parameters are required:\n\n- `file`: The PDF file to be split (type: file)\n- `in_type`: The type of input (type: text)\n- `fixedRange`: The fixed range for splitting (type: text)\n- `mergeOne`: (Optional) Description: (type: text)\n- `extracted`: (Optional) Description: (type: text)\n\n## Response\nThe response for this request is a JSON schema. It includes the schema for the response body.\n\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "update_tool_table",
					"item": [
						{
							"name": "update_tool_table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/update_tool_table",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"update_tool_table"
									]
								},
								"description": "\n    \n### Update Tool Table\n\nThe `update_tool_table` endpoint is used to update the tool table.\n\n#### Request\n\nThe request should be made using the HTTP POST method with a form-data request body type. The request body should include the necessary parameters to update the tool table.\n\n#### Response\n\nThe response for this request is a JSON schema. It includes the structure and data types of the response body.\n\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "xlsx_to_pdf Copy",
					"item": [
						{
							"name": "pdf_to_xlsx",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = pm.response.json()",
											"pm.collectionVariables.set(\"UID\", data.uid);",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"    pm.expect(responseData.uid).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"UID is a non-empty string\", function () {",
											"  pm.expect(responseData.uid).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{Auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "files",
											"contentType": "multipart/form-data",
											"type": "file",
											"src": "XjgX6ebn_/Lecture-2- The Human.pdf"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/excel_to_pdf",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"excel_to_pdf"
									]
								},
								"description": "\n### PDF to XLSX Conversion\n\nThis API endpoint makes an HTTP POST request to convert PDF files to XLSX format. The request should be sent to `{{baseUrl}}/pdf_to_xlsx`.\n\n#### Request Body\n- The request should have a form-data body with a key \"files\" of type \"file\".\n\n#### Response\nThe response of this request is documented as a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "check_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.success).to.exist;",
											"  pm.expect(responseData.message).to.exist;",
											"  pm.expect(responseData.deleteTime).to.exist;",
											"});",
											"",
											"pm.test(\"Success field is a boolean\", function () {",
											"    pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message field is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Delete time is an object with hours, minutes, and seconds fields\", function () {",
											"  pm.expect(responseData.deleteTime).to.be.an('object');",
											"  pm.expect(responseData.deleteTime.hours).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.deleteTime.minutes).to.exist.and.to.be.a('number');",
											"  pm.expect(responseData.deleteTime.seconds).to.exist.and.to.be.a('number');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "",
											"value": "c7181d48-50b0-4c08-8f11-0aff32f8b30f",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/check_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"check_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "expire_time",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('hours');",
											"  pm.expect(responseData).to.have.property('minutes');",
											"  pm.expect(responseData).to.have.property('seconds');",
											"});",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Verify content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/expire_time?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"expire_time"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "download_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData).to.have.property('hours');",
											"  pm.expect(responseData).to.have.property('minutes');",
											"  pm.expect(responseData).to.have.property('seconds');",
											"});",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Verify content type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/download?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"download"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"const responseData = pm.response.json();",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.exist;",
											"    pm.expect(responseData.message).to.exist;",
											"});",
											"",
											"pm.test(\"Success is a boolean value\", function () {",
											"  pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"pm.test(\"Message is a non-empty string\", function () {",
											"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"pm.test(\"Content-Type header is set to 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/delete_file?UID={{UID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"delete_file"
									],
									"query": [
										{
											"key": "UID",
											"value": "{{UID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Auth_token",
			"value": ""
		},
		{
			"key": "UID",
			"value": ""
		}
	]
}